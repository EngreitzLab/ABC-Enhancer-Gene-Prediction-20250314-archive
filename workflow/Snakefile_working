import yaml 
import json
import os
import pandas as pd

## load biosamples config file
biosamples_config_file = config["biosamplesTable"]
biosamples_config = pd.read_table(biosamples_config_file, na_values="").fillna("None").set_index("biosample", drop=False)

## get list of biosamples
all_biosamples = list(biosamples_config.index.values)

## get TSS and genefile names for each biosample 
TSS_files = []
gene_files = []
for x in all_biosamples:
	if not config['use_altTSS']:
		TSS_files.append(config['params_candidate']['genome_tss'])
		gene_files.append(config['params_neighborhoods']['genes'])
	elif biosamples_config.loc[x, "TSS"] == "None":
		TSS_files.append(config['params_candidate']['genome_tss'])
		gene_files.append(config['params_neighborhoods']['genes'])
	else:
		TSS_files.append(biosamples_config.loc[x, 'TSS'])
		gene_files.append(biosamples_config.loc[x, 'genes'])
		
# print(gene_files)
biosamples_config["TSS"] = TSS_files
biosamples_config["genes"] = gene_files

## overall rule to run pipeline
rule all:
	input:
		narrowPeaks_sorted = expand(os.path.join(config['predictions_results_dir'], "{biosample}", "Peaks", "macs2_peaks.narrowPeak.sorted"), biosample=all_biosamples),
		candidateRegions = expand(os.path.join(config['predictions_results_dir'], "{biosample}", "Peaks", "macs2_peaks.narrowPeak.sorted.candidateRegions.bed"),
	    biosample=all_biosamples),
		enhancerLists = expand(os.path.join(config['predictions_results_dir'], "{biosample}", "Neighborhoods", "EnhancerList.txt"),  biosample=all_biosamples),
		allPutative = expand(os.path.join(config['predictions_results_dir'], "{biosample}", "Predictions", "EnhancerPredictionsAllPutative.txt.gz"), biosample=all_biosamples),
		enhPredictions = expand(os.path.join(config['predictions_results_dir'], "{biosample}", "Predictions", "EnhancerPredictions.txt"), biosample=all_biosamples),
		allPred = os.path.join(config['predictions_results_dir'],"AllPredictions.txt.gz"),
		altTSS = TSS_files,
		metricsDirectory = directory(expand(os.path.join(config['predictions_results_dir'], "{biosample}", "Metrics"), biosample=all_biosamples))

	
## call macs2 -- if multiple accessibility inputs for one biosample, will aggregate into one output
rule call_macs_peaks: 
	input:
		#DHS = lambda wildcards: list(str.split(biosamples_config.loc[wildcards.biosample, 'DHS'], ","))
		accessibility = lambda wildcards: list(str.split(biosamples_config.loc[wildcards.biosample, biosamples_config.loc[wildcards.biosample, 'default_accessibility_feature']], ","))
	params:
		pval = config['params_macs']['pval'],
		out_dir = config["predictions_results_dir"]
	output: 
		narrowPeak = os.path.join(config['predictions_results_dir'], "{biosample}", "Peaks", "macs2_peaks.narrowPeak")
	shell: 
		""" 
		macs2 callpeak -f AUTO -g hs -p {params.pval} -n macs2 --call-summits --outdir {params.out_dir}/{wildcards.biosample}/Peaks -t {input.accessibility}
		"""

## sort narrowPeaks
rule sort_narrowpeaks:
	input:
		narrowPeak = lambda wildcards: os.path.join(config['predictions_results_dir'], wildcards.biosample, "Peaks", "macs2_peaks.narrowPeak")
	params:
		chrom_sizes = config['params_candidate']['chrom_sizes']
	output:
		narrowPeakSorted = os.path.join(config['predictions_results_dir'], "{biosample}", "Peaks", "macs2_peaks.narrowPeak.sorted")
	shell:
		"""
		grep -v -E "^\w+_.*" {input.narrowPeak} | bedtools sort -faidx {params.chrom_sizes} -i stdin > {output.narrowPeakSorted}
		"""

## call candidate regions
rule call_candidate_regions:
	input:
		narrowPeak = lambda wildcards: os.path.join(config['predictions_results_dir'], wildcards.biosample, "Peaks", "macs2_peaks.narrowPeak.sorted"),
	params:
		codeDir = config['code_dir'], 
		#DHS = lambda wildcards: biosamples_config.loc[wildcards.biosample, 'DHS'],
		accessibility = lambda wildcards: biosamples_config.loc[wildcards.biosample, biosamples_config.loc[wildcards.biosample, 'default_accessibility_feature']],
		TSS = lambda wildcards: biosamples_config.loc[wildcards.biosample, 'TSS'],
		chrom_sizes = config['params_candidate']['chrom_sizes'],
		regions_blocklist = config['params_candidate']['regions_blocklist'],
		peakExtendFromSummit = config['params_candidate']['peakExtendFromSummit'],
		nStrongestPeak = config['params_candidate']['nStrongestPeaks'],
		threads = 10,
		output_dir = config['predictions_results_dir']
	output: 
		candidateRegions = os.path.join(config['predictions_results_dir'], "{biosample}", "Peaks", "macs2_peaks.narrowPeak.sorted.candidateRegions.bed")
	shell: 
		"""
		python {params.codeDir}/makeCandidateRegions.py \
			--narrowPeak {input.narrowPeak}\
			--bam {params.accessibility} \
			--outDir {params.output_dir}/{wildcards.biosample}/Peaks \
			--chrom_sizes {params.chrom_sizes} \
			--regions_blocklist {params.regions_blocklist} \
			--regions_includelist {params.TSS} \
			--peakExtendFromSummit {params.peakExtendFromSummit} \
			--nStrongestPeak {params.nStrongestPeak}
		"""

## call neighborhoods
rule call_neighborhoods:
	input:		
		candidateRegions = lambda wildcards: os.path.join(config['predictions_results_dir'], wildcards.biosample, "Peaks", "macs2_peaks.narrowPeak.sorted.candidateRegions.bed"),
	params:
		#DHS = lambda wildcards: biosamples_config.loc[wildcards.biosample, 'DHS'],
		DHS = lambda wildcards: biosamples_config.loc[wildcards.biosample, 'DHS'] if not biosamples_config.loc[wildcards.biosample, 'DHS']=='None' else '',
		ATAC = lambda wildcards: biosamples_config.loc[wildcards.biosample, 'ATAC'] if not biosamples_config.loc[wildcards.biosample, 'ATAC']=='None' else '',
		default = lambda wildcards: biosamples_config.loc[wildcards.biosample, 'default_accessibility_feature'],
		H3K27ac = lambda wildcards: biosamples_config.loc[wildcards.biosample, 'H3K27ac'] if not biosamples_config.loc[wildcards.biosample, 'H3K27ac']=='None' else '',
		codeDir = config['code_dir'], 
		genes = lambda wildcards: biosamples_config.loc[wildcards.biosample, 'genes'],
		ubiquitous_genes = config['params_neighborhoods']['ubiquitous_genes'],
		chrom_sizes = config['params_candidate']['chrom_sizes'],
		qnorm = config['params_neighborhoods']['qnorm'],
	conda:
		CONDA_ENV
	output: 
		enhList = os.path.join(config['predictions_results_dir'], "{biosample}", "Neighborhoods", "EnhancerList.txt"),
		geneList = os.path.join(config['predictions_results_dir'], "{biosample}", "Neighborhoods", "GeneList.txt"),
		neighborhoodDirectory = directory(os.path.join(config['predictions_results_dir'], "{biosample}", "Neighborhoods"))
	shell:
		"""
		# get sorted & unique gene list
		bedtools sort -faidx {params.chrom_sizes} -i {params.genes} | uniq > {params.genes}.sorted.uniq
						
		python {params.codeDir}/run.neighborhoods.py \
			--candidate_enhancer_regions {input.candidateRegions} \
			--DHS {params.DHS} \
			--ATAC {params.ATAC} \
			--default_accessibility_feature {params.default} \
			--chrom_sizes {params.chrom_sizes} \
			--outdir {output.neighborhoodDirectory} \
			--genes {params.genes}.sorted.uniq \
			--ubiquitously_expressed_genes {params.ubiquitous_genes} \
			--qnorm {params.qnorm} \
			--H3K27ac {params.H3K27ac}
		"""
		
### run predictions: takes in EnhancerList.txt and GeneList.txt generated from rule call_neighborhoods above and generates Enhancer-Gene Predictions and links
rule run_predictions:
	input:
		enhancers = os.path.join(config['predictions_results_dir'], "{biosample}", "Neighborhoods", "EnhancerList.txt"),
		genes = os.path.join(config['predictions_results_dir'], "{biosample}", "Neighborhoods", "GeneList.txt")
	params:
		cellType = "{biosample}", 
		output_dir = os.path.join(config['predictions_results_dir'], "{biosample}", "Predictions"),
		code_dir = config['code_dir'], 
		hic_dir = config['hic_dir'],
		chrom_sizes = config['params_candidate']['chrom_sizes'],
		hic_resolution = config['params_predict']['hic_resolution'],
		scale_hic_using_powerlaw = config['params_predict']['scale_hic'],
		threshold = config['params_predict']['threshold'],
		make_all_putative = config['params_predict']['all_putative'],
		self_promoter = config['params_predict']['self_promoter'],
	output: 
		allPutative = os.path.join(config['predictions_results_dir'], "{biosample}", "Predictions", "EnhancerPredictionsAllPutative.txt.gz"),
		enhPredictions = os.path.join(config['predictions_results_dir'], "{biosample}", "Predictions", "EnhancerPredictions.txt"),
		enhPredictionsFull = os.path.join(config['predictions_results_dir'], "{biosample}", "Predictions", "EnhancerPredictionsFull.txt"),
	shell:
		"""
		python {params.code_dir}/predict.py \
			--enhancers {input.enhancers} \
			--outdir {params.output_dir} \
			--HiCdir {params.hic_dir} \
			--chrom_sizes {params.chrom_sizes} \
			--hic_resolution {params.hic_resolution} \
			--scale_hic_using_powerlaw {params.scale_hic_using_powerlaw} \
			--threshold {params.threshold} \
			--make_all_putative {params.make_all_putative} \
			--cellType {params.cellType} \
			--genes {input.genes} \
			--include_self_promoter {params.self_promoter}
		"""

### generate AllPredictions file
rule make_all_predictions:
	input: 
		predLists = expand(os.path.join(config['predictions_results_dir'], "{biosample}", "Predictions", "EnhancerPredictions.txt"), biosample=all_biosamples)
	params:
		output_dir = config['predictions_results_dir']
	output:
		allPred = os.path.join(config['predictions_results_dir'],"AllPredictions.txt.gz")
	shell:
		"""			
		set +o pipefail;
		## make all predictions file 
		printf "chr\tstart\tend\tname\tTargetGene\tTargetGeneTSS\tCellType\tABC.Score\n" > {params.output_dir}/AllPredictions.txt
		for sample in {input.predLists}
		do
			cat $sample | sed 1d >> {params.output_dir}/AllPredictions.txt
		done
		gzip {params.output_dir}/AllPredictions.txt
		"""

rule gen_qc_plots:
	input: 
		candidateRegions = os.path.join(config['predictions_results_dir'], "{biosample}", "Peaks", "macs2_peaks.narrowPeak.sorted.candidateRegions.bed"),
		neighborhoodDirectory = directory(os.path.join(config['predictions_results_dir'], "{biosample}", "Neighborhoods")),
		enhPredictionsFull = os.path.join(config['predictions_results_dir'], "{biosample}", "Predictions", "EnhancerPredictionsFull.txt")
	params:
		code_dir = config['code_dir'],
		output_dir = os.path.join(config['predictions_results_dir'], "{biosample}", "Metrics")
	output:
		metricsDirectory = directory(os.path.join(config['predictions_results_dir'], "{biosample}", "Metrics"))
	shell:
		"""
		mkdir -p {output.metricsDirectory}

		python {params.code_dir}/grabMetrics.py \
			--outdir {params.output_dir} \
			--macs_peaks {input.candidateRegions} \
			--neighborhood_outdir {input.neighborhoodDirectory} \
			--preds_file {input.enhPredictionsFull}
		"""
